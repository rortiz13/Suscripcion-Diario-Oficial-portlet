/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package la.netco.generated.model.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import la.netco.generated.model.model.Pais;
import la.netco.generated.model.model.PaisModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Pais service. Represents a row in the &quot;GEO_PAIS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link la.netco.generated.model.model.PaisModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PaisImpl}.
 * </p>
 *
 * @author smontanez
 * @see PaisImpl
 * @see la.netco.generated.model.model.Pais
 * @see la.netco.generated.model.model.PaisModel
 * @generated
 */
public class PaisModelImpl extends BaseModelImpl<Pais> implements PaisModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pais model instance should use the {@link la.netco.generated.model.model.Pais} interface instead.
	 */
	public static final String TABLE_NAME = "GEO_PAIS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_pais", Types.INTEGER },
			{ "nombre", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GEO_PAIS (id_pais INTEGER not null primary key IDENTITY,nombre VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table GEO_PAIS";
	public static final String ORDER_BY_JPQL = " ORDER BY pais.nombre ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GEO_PAIS.nombre ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.la.netco.generated.model.model.Pais"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.la.netco.generated.model.model.Pais"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.la.netco.generated.model.model.Pais"));

	public PaisModelImpl() {
	}

	public int getPrimaryKey() {
		return _id_pais;
	}

	public void setPrimaryKey(int primaryKey) {
		setId_pais(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_id_pais);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return Pais.class;
	}

	public String getModelClassName() {
		return Pais.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_pais", getId_pais());
		attributes.put("nombre", getNombre());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id_pais = (Integer)attributes.get("id_pais");

		if (id_pais != null) {
			setId_pais(id_pais);
		}

		String nombre = (String)attributes.get("nombre");

		if (nombre != null) {
			setNombre(nombre);
		}
	}

	public int getId_pais() {
		return _id_pais;
	}

	public void setId_pais(int id_pais) {
		_id_pais = id_pais;
	}

	public String getNombre() {
		if (_nombre == null) {
			return StringPool.BLANK;
		}
		else {
			return _nombre;
		}
	}

	public void setNombre(String nombre) {
		_nombre = nombre;
	}

	@Override
	public Pais toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Pais)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		PaisImpl paisImpl = new PaisImpl();

		paisImpl.setId_pais(getId_pais());
		paisImpl.setNombre(getNombre());

		paisImpl.resetOriginalValues();

		return paisImpl;
	}

	public int compareTo(Pais pais) {
		int value = 0;

		value = getNombre().compareTo(pais.getNombre());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Pais pais = null;

		try {
			pais = (Pais)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = pais.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Pais> toCacheModel() {
		PaisCacheModel paisCacheModel = new PaisCacheModel();

		paisCacheModel.id_pais = getId_pais();

		paisCacheModel.nombre = getNombre();

		String nombre = paisCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			paisCacheModel.nombre = null;
		}

		return paisCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{id_pais=");
		sb.append(getId_pais());
		sb.append(", nombre=");
		sb.append(getNombre());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("la.netco.generated.model.model.Pais");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_pais</column-name><column-value><![CDATA[");
		sb.append(getId_pais());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nombre</column-name><column-value><![CDATA[");
		sb.append(getNombre());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Pais.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Pais.class
		};
	private int _id_pais;
	private String _nombre;
	private Pais _escapedModelProxy;
}